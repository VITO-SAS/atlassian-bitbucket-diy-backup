#!/bin/bash

##
# It is recommended to `chmod 600 bitbucket.diy-backup.vars.sh` after copying the template.
##

# === Common Variables ===

CURL_OPTIONS="-L -s -f"

# Which filesystem backup script to use (ex: rsync, ebs-home)
# ebs-home means the Bitbucket home (and the database if selected ebs-collocated) will be backed up by taking a snapshot of the EBS volume
BACKUP_HOME_TYPE=rsync

# Which database backup script to use (ex: mssql, postgresql, mysql, ebs-collocated, rds)
# ebs-collocated means the database data directory is located in the volume as the bitbucket home (i.e.: the snapshot / restore of the home directory will cover it)
# rds means your Bitbucket instance is using an RDS instance and we need to produce a snapshot of it on backup
BACKUP_DATABASE_TYPE=postgresql

# What to use to archive the database and home directory backups and (optionally) copy them to offsite locations
# (ex: tar, tar-gpg).
BACKUP_ARCHIVE_TYPE=tar

# Used by the scripts for verbose logging. If not true only errors will be shown.
BITBUCKET_VERBOSE_BACKUP=TRUE

# The base url used to lock/access this bitbucket instance. It cannot end on a '/'. This value can be retrieved from the admin page your Bitbucket instance
BITBUCKET_URL=

# The username and password to a user with the necessary permissions required make non-AWS backups.
BITBUCKET_BACKUP_USER=
BITBUCKET_BACKUP_PASS=

# If set to true, this variable will backup the filesystem and database without locking the application.
# The resulting backups may contain inconsistencies, so you must run Bitbucket Server 4.8 or higher and check recently
# modified repositories and pull requests after restoring. Bitbucket Data Center with the disaster.recovery=true option
# can actively scan for such inconsistencies and resolve them automatically.
# For more information, see https://confluence.atlassian.com/display/BitbucketServer/Using+Bitbucket+Data+Center+Zero+Downtime+Backup
# Make sure you read and understand this document before setting this variable to "true"
BACKUP_ZERO_DOWNTIME=false

# HipChat options
HIPCHAT_URL=https://api.hipchat.com
HIPCHAT_ROOM=
HIPCHAT_TOKEN=

# === Non-AWS Variables ===

# The name of the database used by this instance.
BITBUCKET_DB=bitbucket
# The path to bitbucket home folder (with trailing /)
BITBUCKET_HOME=/var/atlassian/application-data/bitbucket/

# OS level user and group information (typically: 'atlbitbucket' for both)
BITBUCKET_UID=atlbitbucket
BITBUCKET_GID=atlbitbucket

# The path to working folder for the backup
BITBUCKET_BACKUP_ROOT=
BITBUCKET_BACKUP_DB=${BITBUCKET_BACKUP_ROOT}/bitbucket-db/
BITBUCKET_BACKUP_HOME=${BITBUCKET_BACKUP_ROOT}/bitbucket-home/

# The path to where the backup archives are stored
BITBUCKET_BACKUP_ARCHIVE_ROOT=

# List of repo IDs which should be excluded from the backup
# It should be space separated: (2 5 88)
BITBUCKET_BACKUP_EXCLUDE_REPOS=()

# PostgreSQL options
POSTGRES_HOST=
POSTGRES_USERNAME=
POSTGRES_PASSWORD=
POSTGRES_PORT=5432

# MySQL options
MYSQL_HOST=
MYSQL_USERNAME=
MYSQL_PASSWORD=
MYSQL_BACKUP_OPTIONS=

# Options for the tar-gpg archive type
BITBUCKET_BACKUP_GPG_RECIPIENT=

# === AWS Variables ===

# Used in AWS backup & restore to tag snapshots. It cannot contain spaces and it must be under 100 characters long
INSTANCE_NAME=bitbucket

# The availability zone in which volumes will be created when restoring an instance.
AWS_AVAILABILITY_ZONE=`curl ${CURL_OPTIONS} http://169.254.169.254/latest/meta-data/placement/availability-zone`

# The region for the resources Bitbucket is using (volumes, instances, snapshots, etc)
AWS_REGION="`echo \"${AWS_AVAILABILITY_ZONE}\" | sed -e 's:\([0-9][0-9]*\)[a-z]*\$:\\1:'`"

# The EC2 instance ID
AWS_EC2_INSTANCE_ID="$(curl ${CURL_OPTIONS} http://169.254.169.254/latest/meta-data/instance-id)"

# Additional AWS tags for EBS and RDS snapshot, tags needs to be in JSON format without enclosing square brackets:
# Example: AWS_ADDITIONAL_TAGS='{"Key":"Value"}, {"Key":"Value"}'
AWS_ADDITIONAL_TAGS=

# The number of backups to keep.  After backups are taken, all old snapshots except for the most recent ${KEEP_BACKUPS}
# are deleted.  Set to 0 to disable cleanup of old snapshots.
KEEP_BACKUPS=0

# The mount point for the home directory volume
HOME_DIRECTORY_MOUNT_POINT=/media/atl
# The device name to which the home directory volume is attached as it appears in your Amazon console
# Do NOT use the 'mount' command to retrieve this value as the linux device-driver might have assigned a different value
HOME_DIRECTORY_DEVICE_NAME=/dev/xvdf

# The type of volume to create when restoring the home directory
RESTORE_HOME_DIRECTORY_VOLUME_TYPE=gp2
# Required if RESTORE_HOME_DIRECTORY_VOLUME_TYPE has been set to 'io1'. Ignored otherwise.
# The IOPS that should be provisioned for the new volume. Note: Maximum IOPS to volume size ratio is 30
RESTORE_HOME_DIRECTORY_IOPS=1000

# The AWS Account ID, used when copying EBS + RDS snapshots across region
BACKUP_DEST_AWS_ACCOUNT_ID=
# The AWS Role ARN to assume when tagging the EBS + RDS snapshots
BACKUP_DEST_AWS_ROLE=

# This variable is only required if you wish to copy the EBS and RDS snapshots to another region
# If set, this variable will copy the EBS & RDS snapshot to the specified region
BACKUP_DEST_REGION=

# === AWS RDS Variables ===

# The RDS instance ID for the database to backup
BACKUP_RDS_INSTANCE_ID=

# The RDS instance ID for the database to create on restore, must be unique.
RESTORE_RDS_INSTANCE_ID=
# The instance class to use when restoring the database
RESTORE_RDS_INSTANCE_CLASS=db.r3.large
# The subnet in which the database will be restored
RESTORE_RDS_SUBNET_GROUP_NAME=
# The security group to assign to the restored instance
RESTORE_RDS_SECURITY_GROUP=